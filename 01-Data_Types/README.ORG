#+TITLE: HA's GNU Emacs Config
#+AUTHOR: Hussain Almalki (HA)
#+DESCRIPTION: Data Types
#+STARTUP: showeverything
#+OPTIONS: toc:2

* TABLE OF CONTENTS :toc:
- [[#fundamental-data-types---integer][Fundamental Data Types - Integer]]
  - [[#size-of-integer][SIZE OF INTEGER]]
  - [[#summary][SUMMARY]]

* Fundamental Data Types - Integer
We have various data types to study. And today we begin our session with ~integer Data Type~.
** SIZE OF INTEGER
| 2 bytes | 16 bits |
| 4 bytes | 32 bits |

*** WANNA KNOW SIZE PROGRAMMATICALLY?
- Use ~sizeof~ operator
#+begin_src c
#include <stdio.h>

int main(){
  printf("%d", sizeof(int));
  return 0;
}
#+end_src
*Note:* sizeof is a unary operator and not function.
#+begin_src output
4
#+end_src

*** RANGE
*Range:* upper and lower limit of some set of data.
FOR EXAMPLE: {0,1,2,3,4}
Range: 0 to 4

*** PREREQUSITES
*Decimal number system:* Human Understandabel number system.
Also called as ~base 10~ number system.
*Range:* 0 to 9
FOR EXAMPLE: 5 6 8
10^2 x 5 + 10^1 x 6 + 10^0 x 8 = 500 + 60 + 8 = 568

*Binary number system:* Machine Understandable number system.
Also called as ~base 2~ number system.
*Range:* 0 to 1
FOR EXAMPLE: 1100
2^3 x 1 + 2^2 x 1 + 2^1 x 0 + 2^0 x 0 = 8 + 4 + 0 + 0 = 12

*** RANGE OF 4 BIT DATA?
Now what would be the range of 4 bit data? As we know, to calculate range of any nubmer we have to know its minimum, as well as maximum value. For 4 bit data, minimum value is equals to 0. And maximum value is equals to 15.

4 bit data: 0000 minimum value = 0
4 bit data: 1111 maximum value = 15
Range of 4 bit data: 0000 to 1111
*FORMULA:* ~2^n - 1~

*** RANGE OF INTEGER
The size of integer is of 2 bytes,
(2 bytes) [16 bits]
- Unsgned range: 0 to 65535 ( by applying: 2^n - 1)
- Signed range: -32768 to +32767
- 2's complement range: -(2^n-1) to +(2^n-1 - 1)
(4 bytes) [32 bits]
- Unsigned range: 0 to 4294967295 (by applying: 2^n -1)
- Signed range: -2147493648 to +2147483647

*** OUTLINE
- Modifiers (short,long,signed,unsigned) used for integer.
- Some programming examples.

*** LONG AND SHORT
These are the modifiers used to make it possible for a data type to take either less or more memory. ~If integer is 4 bytes, short int may be 2 bytes~.
Size of short integer is of 2 bytes. As you can see, the output is 2.
#+begin_src c
#include <stdio.h>

int main(){
  printf("%d", sizeof(short int));
  return 0;
}
#+end_src
Output:
#+begin_src output
2
#+end_src
On the other hand, using long as a modifier in front of integer allows integer data type to take more memory space. Here you can see output is 8.
#+begin_src c
#include <stdio.h>

int main(){
  printf("%d", sizeof(long int));
  return 0;
}
#+end_src
Output:
#+begin_src 
8
#+end_src

sizeof(short) <= sizeof(int) <= sizeof(long)
*NOTE:* by default int some_variable_name; is signed integer variable.
Unsigned int some_variable_name; allows only positive values.

*** PROGRAMMING EXAMPLES
First of all, I have included a new header file limits.h. This header file consists of some symbolic constants, that are useful in determining the minimum as well as the maximum valuse.
#+begin_src c
#include <stdio.h>
#include <limits.h>

int main(){
  int var1 = INT_MIN;
  int var2 = INT_MAX;

  printf("range of signed integer is from: %d to %d", var1, var2);
  return 0;
}
#+end_src
Output:
#+begin_src output
range of signed integer is from: -2147483648 to 2147483647
#+end_src

#+begin_src c
#include <stdio.h>
#include <limits.h>

int main(){
  unsigned int var1 = 0;
  unsigned int var2 = UINT_MAX;

  printf("range of unsigned integer is from: %u to %u", var1, var2);
  return 0;
}
#+end_src
Output:
#+begin_src output
range of signed integer is from: 0 to 4294967295
#+end_src

#+begin_src c
#include <stdio.h>
#include <limits.h>

int main(){
  short int var1 = SHRT_MIN;
  short int var2 = SHRT_MAX;

  printf("range of short signed integer is from: %d to %d", var1, var2);
  return 0;
}
#+end_src
Output:
#+begin_src output
range of short signed integer is from: -32768 to 32767
#+end_src

#+begin_src c
#include <stdio.h>
#include <limits.h>

int main(){
  short unsigned int var1 = 0;
  short unsigned int var2 = USHRT_MAX;

  printf("range of short unsigned integer is from: %u to %u", var1, var2);
  return 0;
}
#+end_src
Output:
#+begin_src output
range of short signed integer is from: 0 to 65535
#+end_src

if sizeof(long int) = 4 bytes
then sizeof(long long int) = 8 bytes
else
if sizeof(long int) = 8 bytes
then sizeof(long long int) = 8 bytes

** SUMMARY
- sizeof(short) <= sizeof(int) <= sizeof(long).
- Writing signed int some_variable_name; is equivalent to writing int some_variable_name;
- %d is used to print "signed integer".
- %u is used to print "unsigned integer".
- %ld is used to print "long integer" equivalent to "signed long integer".
- %lu is used to print "unsigned long integer".
- %lld is used to print "long long integer".
- %llu is used to print "unsigned long long integer".
