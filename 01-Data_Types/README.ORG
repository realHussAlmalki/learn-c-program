#+TITLE: HA's GNU Emacs Config
#+AUTHOR: Hussain Almalki (HA)
#+DESCRIPTION: Data Types
#+STARTUP: showeverything
#+OPTIONS: toc:2

* TABLE OF CONTENTS :toc:
- [[#fundamental-data-types---integer][Fundamental Data Types - Integer]]
  - [[#size-of-integer][SIZE OF INTEGER]]
  - [[#summary][SUMMARY]]
- [[#exceeding-the-valid-range-of-data-tpes][Exceeding the Valid Range of Data Tpes]]
  - [[#outline][OUTLINE]]
- [[#fundamental-data-types---character][Fundamental Data Types - Character]]
  - [[#outline-1][OUTLINE]]
  - [[#overview][OVERVIEW]]
  - [[#size-and-range-of-character][SIZE AND RANGE OF CHARACTER]]
  - [[#signed-vs-unsigned][SIGNED VS UNSIGNED]]
  - [[#summary-1][SUMMARY]]
- [[#fundamental-data-types---float-double--long-double][Fundamental Data Types - Float, Double & Long Double]]
  - [[#outline-2][OUTLINE]]
  - [[#float-double-and-long-double][FLOAT, DOUBLE AND LONG DOUBLE]]
  - [[#overview-on-fixed-and-gloating-point][OVERVIEW ON FIXED AND GLOATING POINT]]
  - [[#why-three-different-data-types][WHY THREE DIFFERENT DATA TYPES]]
- [[#important-questions-set-1][Important Questions SET 1]]
- [[#scope-of-variables---local-vs-global][Scope of Variables - Local vs Global]]
  - [[#outlien][OUTLIEN]]
  - [[#definning-scope][DEFINNING SCOPE]]
  - [[#basic-principle-of-scoping][BASIC PRINCIPLE OF SCOPING]]
- [[#variable-modifiers---auto--extern][Variable Modifiers - Auto & Extern]]
  - [[#what-is-auto-modifier][WHAT IS AUTO MODIFIER?]]
  - [[#extern-modifier][EXTERN MODIFIER]]
- [[#variable-modifiers---register][Variable Modifiers - Register]]
  - [[#what-is-register-modifier][WHAT IS REGISTER MODIFIER?]]
- [[#variable-modifiers---static][Variable Modifiers - Static]]
  - [[#takeaways][TAKEAWAYS]]
- [[#constants-in-c][Constants in C]]
  - [[#what-is-constant][WHAT IS CONSTANT?]]
  - [[#defining-constants][DEFINING CONSTANTS]]

* Fundamental Data Types - Integer
We have various data types to study. And today we begin our session with ~integer Data Type~.
** SIZE OF INTEGER
| 2 bytes | 16 bits |
| 4 bytes | 32 bits |

*** WANNA KNOW SIZE PROGRAMMATICALLY?
- Use ~sizeof~ operator
#+begin_src c
#include <stdio.h>

int main(){
  printf("%d", sizeof(int));
  return 0;
}
#+end_src
*Note:* sizeof is a unary operator and not function.
#+begin_src output
4
#+end_src

*** RANGE
*Range:* upper and lower limit of some set of data.
FOR EXAMPLE: {0,1,2,3,4}
Range: 0 to 4

*** PREREQUSITES
*Decimal number system:* Human Understandabel number system.
Also called as ~base 10~ number system.
*Range:* 0 to 9
FOR EXAMPLE: 5 6 8
10^2 x 5 + 10^1 x 6 + 10^0 x 8 = 500 + 60 + 8 = 568

*Binary number system:* Machine Understandable number system.
Also called as ~base 2~ number system.
*Range:* 0 to 1
FOR EXAMPLE: 1100
2^3 x 1 + 2^2 x 1 + 2^1 x 0 + 2^0 x 0 = 8 + 4 + 0 + 0 = 12

*** RANGE OF 4 BIT DATA?
Now what would be the range of 4 bit data? As we know, to calculate range of any nubmer we have to know its minimum, as well as maximum value. For 4 bit data, minimum value is equals to 0. And maximum value is equals to 15.

4 bit data: 0000 minimum value = 0
4 bit data: 1111 maximum value = 15
Range of 4 bit data: 0000 to 1111
*FORMULA:* ~2^n - 1~

*** RANGE OF INTEGER
The size of integer is of 2 bytes,
(2 bytes) [16 bits]
- Unsgned range: 0 to 65535 ( by applying: 2^n - 1)
- Signed range: -32768 to +32767
- 2's complement range: -(2^n-1) to +(2^n-1 - 1)
(4 bytes) [32 bits]
- Unsigned range: 0 to 4294967295 (by applying: 2^n -1)
- Signed range: -2147493648 to +2147483647

*** OUTLINE
- Modifiers (short,long,signed,unsigned) used for integer.
- Some programming examples.

*** LONG AND SHORT
These are the modifiers used to make it possible for a data type to take either less or more memory. ~If integer is 4 bytes, short int may be 2 bytes~.
Size of short integer is of 2 bytes. As you can see, the output is 2.
#+begin_src c
#include <stdio.h>

int main(){
  printf("%d", sizeof(short int));
  return 0;
}
#+end_src
Output:
#+begin_src output
2
#+end_src
On the other hand, using long as a modifier in front of integer allows integer data type to take more memory space. Here you can see output is 8.
#+begin_src c
#include <stdio.h>

int main(){
  printf("%d", sizeof(long int));
  return 0;
}
#+end_src
Output:
#+begin_src 
8
#+end_src

sizeof(short) <= sizeof(int) <= sizeof(long)
*NOTE:* by default int some_variable_name; is signed integer variable.
Unsigned int some_variable_name; allows only positive values.

*** PROGRAMMING EXAMPLES
First of all, I have included a new header file limits.h. This header file consists of some symbolic constants, that are useful in determining the minimum as well as the maximum valuse.
#+begin_src c
#include <stdio.h>
#include <limits.h>

int main(){
  int var1 = INT_MIN;
  int var2 = INT_MAX;

  printf("range of signed integer is from: %d to %d", var1, var2);
  return 0;
}
#+end_src
Output:
#+begin_src output
range of signed integer is from: -2147483648 to 2147483647
#+end_src

#+begin_src c
#include <stdio.h>
#include <limits.h>

int main(){
  unsigned int var1 = 0;
  unsigned int var2 = UINT_MAX;

  printf("range of unsigned integer is from: %u to %u", var1, var2);
  return 0;
}
#+end_src
Output:
#+begin_src output
range of signed integer is from: 0 to 4294967295
#+end_src

#+begin_src c
#include <stdio.h>
#include <limits.h>

int main(){
  short int var1 = SHRT_MIN;
  short int var2 = SHRT_MAX;

  printf("range of short signed integer is from: %d to %d", var1, var2);
  return 0;
}
#+end_src
Output:
#+begin_src output
range of short signed integer is from: -32768 to 32767
#+end_src

#+begin_src c
#include <stdio.h>
#include <limits.h>

int main(){
  short unsigned int var1 = 0;
  short unsigned int var2 = USHRT_MAX;

  printf("range of short unsigned integer is from: %u to %u", var1, var2);
  return 0;
}
#+end_src
Output:
#+begin_src output
range of short signed integer is from: 0 to 65535
#+end_src

if sizeof(long int) = 4 bytes
then sizeof(long long int) = 8 bytes
else
if sizeof(long int) = 8 bytes
then sizeof(long long int) = 8 bytes

** SUMMARY
- sizeof(short) <= sizeof(int) <= sizeof(long).
- Writing signed int some_variable_name; is equivalent to writing int some_variable_name;
- %d is used to print "signed integer".
- %u is used to print "unsigned integer".
- %ld is used to print "long integer" equivalent to "signed long integer".
- %lu is used to print "unsigned long integer".
- %lld is used to print "long long integer".
- %llu is used to print "unsigned long long integer".

* Exceeding the Valid Range of Data Tpes
** OUTLINE
- Exceeding the unsigned range
- Exceeding the signed range

  here int this example I had provided an indigent variable and that to an unsigned integer variable and assigned it a value 4294967295 which is the maximum allowable value of an unsigned integer.

#+begin_src c
#include <stdio.h>

int main(){
  unsigned int var = 4294967295;
  printf("%u", var);
  return 0;
}
#+end_src
Output:
#+begin_src output
4294967295
#+end_src

When we chagne the range we getting value is equals to zero.
#+begin_src c
#include <stdio.h>

int main(){
  unsigned int var = 4294967296;
  printf("%u", var);
  return 0;
}
#+end_src
Output:
#+begin_src output
0
#+end_src

We are having the value from 0 to 7 for a 3 bit representation the minimum value would be equals to 0 and the maximum value is equals to 7.
| 2^2 | 2^1 | 2^0 | 3 bit |
|   0 |   0 |   0 |     0 |
|   0 |   0 |   1 |     1 |
|   0 |   1 |   0 |     2 |
|   0 |   1 |   1 |     3 |
|   1 |   0 |   0 |     4 |
|   1 |   0 |   1 |     5 |
|   1 |   1 |   0 |     6 |
|   1 |   1 |   1 |     7 |

When we try to represent the value 1 greater than 7 that is 8 if you want be able to represent this value 8 in a 3 bit representation as you can see foruth.

| 2^3 | 2^2 | 2^1 | 2^0 | 3 bit |
|   0 |   0 |   0 |   0 |     0 |
|   0 |   0 |   0 |   1 |     1 |
|   0 |   0 |   1 |   0 |     2 |
|   0 |   0 |   1 |   1 |     3 |
|   0 |   1 |   0 |   0 |     4 |
|   0 |   1 |   0 |   1 |     5 |
|   0 |   1 |   1 |   0 |     6 |
|   0 |   1 |   1 |   1 |     7 |
|   1 |   0 |   0 |   0 |     8 | -> 0 0 0

For 32 bit unsigned data -> Mod 2^32
For n bit unsigned data -> Mod 2^n
#+begin_src c
#include <stdio.h>

int main() {
  int var = 2147483648;
  printf("%d", var);
  return 0;
}
#+end_src
Output
#+begin_src output
main.c: In function ‚Äòmain‚Äô:
main.c:8:15: warning: overflow in conversion from ‚Äòlong int‚Äô to ‚Äòint‚Äô changes value from ‚Äò2147483648‚Äô to ‚Äò-2147483648‚Äô [-Woverflow]
    8 |     int var = 2147483648;
      |               ^~~~~~~~~~
#+end_src

#+begin_src c
#include <stdio.h>

int main() {
  int var = -2147483649;
  printf("%d", var);
  return 0;
}
#+end_src
Output:
#+begin_src output
main.c: In function ‚Äòmain‚Äô:
main.c:8:15: warning: overflow in conversion from ‚Äòlong int‚Äô to ‚Äòint‚Äô changes value from ‚Äò-2147483649‚Äô to ‚Äò2147483647‚Äô [-Woverflow]
    8 |     int var = -2147483649;
      |               ^
#+end_src

* Fundamental Data Types - Character
** OUTLINE
- Brief overview on character data type.
- Size of characters.
- Range of characters.
- Difference between signed and unsigned characters.

** OVERVIEW
|        H |        E |        L |        L |        O |       ! |
| 01001000 | 01100101 | 01101100 | 01101100 | 01101111 | 0010001 |
Computer is capable to understand only 0 and 1. Therefor, we need to represent characters in 0 and 1 form only. But we don't need to bother about it. Because internally, all are represented in bits form only. To encode characters, there are several encoding schemes available. But one of the most commaon encoding scheme is ~ASCII~. [[https://www.ascii-code.com/][here]]

*HOW WE DEFINE AND DECLARE A CHARACTER VARIABLE*
=char some_variable_name = 'N';=
I have declared a variable of character data type ~char~ and assigned it a character ~N~.
NOTE:üìçRemember to put single quotes '' and *not* double quotes ""
You can also assign integer values to them. For example
=char some_variable_name = 65;=
I have provided a value 65. Now, this value acts like a charcater, when we are going to print it of this variable we get a character instedad of an integer.

#+begin_src c
#include <stdio.h>

int main(){
  char var = 65;
  printf("%c", var);
  return 0;
}
#+end_src
Output:
#+begin_src output
A
#+end_src

** SIZE AND RANGE OF CHARACTER
*** Size:
- 1 byte = 8 bits
*** Range:
- Unsigned: 0 to 255
- Signed: -128 to +127

** SIGNED VS UNSIGNED
-128 =
|----+---+---+---+---+---+---+---|
|  7 | 6 | 5 | 4 | 3 | 2 | 1 | 0 |
| -2 | 2 | 2 | 2 | 2 | 2 | 2 | 2 |
|  1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 |
+128 =
|---+---+---+---+---+---+---+---|
| 7 | 6 | 5 | 4 | 3 | 2 | 1 | 0 |
| 2 | 2 | 2 | 2 | 2 | 2 | 2 | 2 |
| 1 | 0 | 0 | 0 | 0 | 0 | 0 | 0 |
-127 =
|----+---+---+---+---+---+---+---|
|  7 | 6 | 5 | 4 | 3 | 2 | 1 | 0 |
| -2 | 2 | 2 | 2 | 2 | 2 | 2 | 2 |
|  1 | 0 | 0 | 0 | 0 | 0 | 0 | 1 |
+129 =
|---+---+---+---+---+---+---+---|
| 7 | 6 | 5 | 4 | 3 | 2 | 1 | 0 |
| 2 | 2 | 2 | 2 | 2 | 2 | 2 | 2 |
| 1 | 0 | 0 | 0 | 0 | 0 | 0 | 1 |
-1 =
|----+---+---+---+---+---+---+---|
|  7 | 6 | 5 | 4 | 3 | 2 | 1 | 0 |
| -2 | 2 | 2 | 2 | 2 | 2 | 2 | 2 |
|  1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 |
+255 =
|---+---+---+---+---+---+---+---|
| 7 | 6 | 5 | 4 | 3 | 2 | 1 | 0 |
| 2 | 2 | 2 | 2 | 2 | 2 | 2 | 2 |
| 1 | 1 | 1 | 1 | 1 | 1 | 1 | 1 |

#+begin_src c
#include <stdio.h>

int main(){
  char var = -128;
  printf("%c", var);
  return 0;
}
#+end_src

** SUMMARY
- Size of character = 1 byte
- Signed character range: -128 to +127
- Unsigned character range: 0 to 255
- Negative values won't byt you any additional powers
- In traditional ASCII table, each character requires 7 bits.
- In extended ASCII table, each character utilize all 8 bits.

* Fundamental Data Types - Float, Double & Long Double
** OUTLINE
- Float, double, long double - size and differenne between them.
- Brief introduction to fixed and floating point.
- Coding example.
** FLOAT, DOUBLE AND LONG DOUBLE
For representing fractional numbers. For example: 3.14, 0.678, -3276.789, 0.00000009999 etc. This different sizes as well. In my system, float takes 4 bytes of space.
- Float -> 4 bytes = 32bits
- Double -> 8 bytes = 64bits
- Long Duble -> 16 bytes = 96bits
Size of these data types totally depends from system to system.
- Flat -> IEEE 754 Single Precision Floating Point
- Double -> IEEE 754 Double Precision Floating Point
- Long Double -> Extended Precision Floating Point
** OVERVIEW ON FIXED AND GLOATING POINT
*** Fixed Point Representation
|------+---------+-----------|
| -    |       9 | . 99      |
| Sign | integer | Fractioin |
- Minimum value = -9.99
- Maximum value = +9.99

** WHY THREE DIFFERENT DATA TYPES
- No more words.
- Let the code speaks it out.
  
#+begin_src c
#include <stdio.h>

int main(){
  float var1 = 3.1415926535897932;
  double var2 = 3.1415926535897932;
  long double var3 = 3.141592653589793213456;

  printf("%ld\n", sizeof(float));
  printf("%ld\n", sizeof(double));
  printf("%ld\n", sizeof(long double));
  printf("%.16f\n", var1);
  printf("%.16f\n", var2); //lf
  printf("%.21Lf\n", var3);
  return 0;
}
#+end_src
Output:
#+begin_src text
4
8
16
3.1415927410125732
3.1415926535897931
3.141592653589793115998
#+end_src

#+begin_src c
#include <stdio.h>

int main(){
  float var1 = 3.1415926535897932;
  double var2 = 3.1415926535897932;
  long double var3 = 3.141592653589793213456;

  printf("%ld\n", sizeof(float));
  printf("%ld\n", sizeof(double));
  printf("%ld\n", sizeof(long double));
  printf("%.2f\n", var1);
  printf("%.16f\n", var2); //lf
  printf("%.21Lf\n", var3);
  return 0;
}
#+end_src
Output:
#+begin_src text
4
8
16
3.14
3.1415926535897931
3.141592653589793115998
#+end_src

#+begin_src c
#include <stdio.h>

int main(){
  int var = 4/9;
  printf("%d\n", var);
  float var1 = 4/9;
  printf("%.2f\n", var1);
  float var2 = 4.0/9.0;
  printf("%.2f\n", var2);
  return 0;
}
#+end_src
Output:
#+begin_src text
0
0.00
0.44
#+end_src

* Important Questions SET 1
- Q1: what is the output of the following C program fragment:
  - %s is used to print "string of characters."
  - printf not only prints the content on the screen. It also returns the number of characters that it successfully prints on the screen.
#+begin_src c
#include <stdio.h>

int main(){
  printf("%d", printf("%s", "Hello Word!"));
  return 0;
}
#+end_src
Output:
#+begin_src text
Hello World!12
#+end_src

- Q2: what is the output of the following C program fragement:
#+begin_src c
#include <stdio.h>

int main(){
  printf("%10s", "Hello");
  return 0;
}
#+end_src
Output:
#+begin_src text
     Hello
#+end_src

- Q3: what is the output of the following C program fragement:
#+begin_src c
#include <stdio.h>

int main(){
  char c = 255;
  c = c + 10;
  print("%d", c);
  return 0;
}
#+end_src
- a) 265
- b) Some character according to ASCII table
- c) 7
- d) 9 -> ansswer 

- Q4: Which of the following statement/statements is/are correct corresponding to the definition of integer:
  - I) signed int i;
  - II) signed i;
  - III) unsigned i;
  - V) long int i;
  - VI) long long i;

  - a) Only I and V are correct
  - b) Only I is correct
  - c) All are correct -> because integer is implicitly assumed.
  - d) Only IV, V, are correct

 - Q5: what does the following program fragement prints?
#+begin_src c
#include <stdio.h>

int main(){
  unsigned i = 1;
  int j = -4;
  printf("%u", i+j);
  return 0;
}
#+end_src 
-3 in 2s complement representation:
- Step 1: Take 1s complement of 3
  - 3 = 00000000 00000000 00000000 00000011
  - 1s complement of 3 = 11111111 11111111 11111111 11111100
- Step 2: Add 1 to the result. it will give
  - 11111111 11111111 11111111 11111101 = 4294967293 ( on my computer)

* Scope of Variables - Local vs Global
** OUTLIEN
- Definining Scope of a Variable.
- Local Variable.
- Global Variable.
** DEFINNING SCOPE
Scope = Lifetime
The area under which a varable is applicable or alive. *Strict Definition*: a black or a region where a variable is declared, defined and used and when a block or a region ends, variable is automatically destroyed.
#+begin_src c
#include <stdio.h>

int main(){
  //Scope of this variable is whitin main() functin only.
  //NOTE:Therefore called LOCAL to main() function
  int var = 34;
  printf("%d", var);
  return 0;
}

int fun(){
  //NOTE: Trying to access variable var outside main() function
  //ERROR: var undeclared
  printf("%d", var);
}
#+end_src
** BASIC PRINCIPLE OF SCOPING
#+begin_src c
{
  ...
  //Contents of outer black upto this point are visible to the internal black
  {
    //Contents of internal black are not visible to outer black.
    ...
  }
}
#+end_src

#+begin_src c
{
  //Contents of thsi black is not visible to any block outside to this black.
  ...
}

{
  //Contents of thsi black is not visible to any block outside to this black.
  ...
}
#+end_src

#+begin_src c 
#include <stdio.h>

int main(){
  int var = 3;
  int var = 4;
  printf("%d\n", var);
  printf("%d", var);
  return 0;
}
#+end_src
Output
#+begin_src text
main.c: In function ‚Äòmain‚Äô:
main.c:9:9: error: redefinition of ‚Äòvar‚Äô
    9 |     int var = 4;
      |         ^~~
main.c:8:9: note: previous definition of ‚Äòvar‚Äô with type ‚Äòint‚Äô
    8 |     int var = 3;
      |         ^~~
make: *** [Makefile:4: all] Error 1
#+end_src

#+begin_src c 
#include <stdio.h>

int main(){
  int var = 3;
  {
    int var = 4;
    printf("%d\n", var);
  }
  printf("%d", var);
  return 0;
}
#+end_src
Output:
#+begin_src text
4
3
#+end_src

#+begin_src c
#include <stido.h>

int fun();

//NOTE: This variable is outside of all functions.
//Therefore called a GLOBAL variable
int var = 10;

int main(){
  int var = 3;
  printf("%d\n", var); //OUTPUT: 3
  fun(); //OUTPUT: 10
  return 0;
}

int fun(){
  //NOTE: It will access the GLOBAL variable.
  printf("%d", var);
}
#+end_src

* Variable Modifiers - Auto & Extern
** WHAT IS AUTO MODIFIER?
Auto means Automatic. Vairables declared inside a spcope by default are automatic variables. *Synas*: ~auto int some_variable_name;~
#+begin_src c
#include <stdio.h>
//NOTE: an automatic variable major benefit is that variable won't waste any memory.
//Because, after the completion of this function, this variable gets destroyed.
int main(){
  int var;
  return 0;
}
#+end_src

#+begin_src c
#include <stdio.h>

int main(){
  auto int var;
  return 0; //NOTE: output: tarbage value.
}
#+end_src

*** TAKE AWAYS
- If you won't initialize auto variable, by default it will be initialized with some garbage (random) value.
- On the other hand, ~global variable~ by default initialized to 0.
#+begin_src c
#include <stdio.h>

int var;
int main(){
  printf("%d", var);
  return 0; //NOTE: output: 0
}
#+end_src
** EXTERN MODIFIER
| int var;                   | extern int var; |
| Declaration and Definition | Declaration     |

- Extern is short name for external.
- Used when a particular file needs to access a variable from another file.

#+begin_src c
#include <stdio.h>
//NOTE: this file is main.c

extern int a;
int main(){
  printf("%d", a);
  return 0;
}
#+end_src

#+begin_src c
#include <stdio.h>
//NOTE: this file is other.c
int a = 5;
#+end_src

#+begin_src c
#include <stdio.h>

int a = 9;
int main(){
  extern int a;
  printf("%d", a);
  return 0;
}
#+end_src

#+begin_src c
#include <stdio.h>

extern int a = 9;
int main(){
  printf("%d", a);
  return 0;
}
#+end_src

*** TAKE AWAYS
- When we write ~extern come_data_type some_variable_name;~ no memory is allocated. Only property of variable is announced.
- Multiple declarations of extern variavle is allowed within the file. Thsi not the case with automatic variables.
- Extern variable says to compiler "go outside from my scope and you witl find teh definition of the I declared".
- compiler believes that whatever the extern variable said is true and produce no error. Linker throws an error when he finds no such variable exist.
- When an extern variable is initialized, then memory for thsi variable is allocated and it will be considered defined.

* Variable Modifiers - Register
|---------------------------------------+-----------------+------------------|
| Increasing order of access time ratio | Register Memory |                  |
|                                       | Cach Memory     |                  |
|                                       | Main Memory     | Primary Memory   |
|                                       | Magenetic Disks | Auxillary Memory |
|                                       | Magnetic Tapes  | Auxillary Memory |
|---------------------------------------+-----------------+------------------|

** WHAT IS REGISTER MODIFIER?
*Syntax*: ~register some_data_type some_variable_name;~
#+begin_src c
#include <stdio.h>

int main(){
  register int var;
  return 0;
}
#+end_src
- *Register keyword hints the compiler to store a variable in register memory.*
- This is done because access time reduces greatly for most frequently referred variables.
- This is the choice of compiler whether it puts the given variable in register or not.
- Usually compiler themselves do the necessary optimizations.
* Variable Modifiers - Static

#+begin_src c
#include <stdio.h>
#include <stdlib.h>

int main(){
  int value;
  value = increment();
  value = increment();
  value = increment();

  printf("%d", value);
  return 0;
}
#+end_src

#+begin_src c
//NOTE:add.c
int increment(){
  int count = 0;
  count = count + 1;
  return count; //output 1
}
#+end_src

#+begin_src c
//NOTE:add.c
int count;

int increment(){
  count = count + 1;
  return count; //output 3
}
#+end_src
---
#+begin_src c
#include <stdio.h>
#include <stdlib.h>

extern int count;
int main(){
  int value;
  value = increment();
  value = increment();
  value = increment();
  count = count + 3;
  value = count;

  printf("%d", value);
  return 0;
}
#+end_src

#+begin_src c
//NOTE:add.c
static int count;

int increment(){
  count = count + 1;
  return count;
}
#+end_src
---
#+begin_src c
#include <stdio.h>
#include <stdlib.h>

int main(){
  int value;
  value = increment();
  value = increment();
  value = increment();

  printf("%d", value);
  return 0;
}
#+end_src

#+begin_src c
//NOTE:add.c

int increment(){
  //int var = 3; 
  static int count; //static int count = 3; // static int count = var; -> Error
  count = count + 1;
  return count; //output 3
}
#+end_src

** TAKEAWAYS
- Static variable remains in memory even if it is declared within a block on the other hand automatic variable is destroyed after the completion of function in which it was declared.
- Static variable if declared outside the scope of any function will act like global variable but only within the file in which it is declared.
- You can only assign a constant literal (or value) to a static variable.

* Constants in C
** WHAT IS CONSTANT?
As the name suggests - something that never change. Once defined cannot be modified later in the code.
** DEFINING CONSTANTS
|---------------+-------------------------------------------------|
| using #define | Syntax: #define NAME value                      |
| using const   | Syntax: const some_data_type some_variable_name |

*** using #define
Also called Macro. Job of preprocessor (not compiler) to replace NAME with value.
#+begin_src c
#include <stdio.h>
#define PI 3.14159

int main(){
  printf("%.5f", PI);
  return 0;
}
#+end_src
Output
#+begin_src text
3.14159
#+end_src
*** TAKEAWAYS
- Please don't add ~semicolon~ at the end.
- Choosing capital letters for NAME is good practice.
- Whatever inside double qoutes "" won't get replaced.
- We can use macros like functions.
#+begin_src c
#include <stdio.h>
#define add(x,y) x+y

int main(){
  printf("addition of two numbers: %d", add(4,3));
  return 0;
}
#+end_src
- We can write multiple lines using \
- First expansion then evaluation.
- Some predefined macros like ~__DATE__~, ~__TIME__~ can print current date and time.
#+begin_src c
#include <stdio.h>

int main(){
  printf("DATE: %s\n", __DATE__);
  printf("TIME: %s\n", __TIME__);
  return 0;
}
#+end_src
*** using const
#+begin_src c
#include <stdio.h>

int main(){
  int var = 67;
  var = 57;
  printf("%d", var);
  return 0;
}
#+end_src

#+begin_src c
#include <stdio.h>

int main(){
  const int var = 67;
  printf("%d", var);
  return 0;
}
#+end_src
